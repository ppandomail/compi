
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 19 11:21:26 ART 2020
//----------------------------------------------------

package ar.edu.ub.dc.compilador_robotgrid;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 19 11:21:26 ART 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\006\000\002\002\004\000\002\003" +
    "\005\000\002\016\011\000\002\005\004\000\002\005\002" +
    "\000\002\006\011\000\002\004\013\000\002\007\004\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\011\000\002\013" +
    "\011\000\002\012\011\000\002\015\003\000\002\015\004" +
    "\000\002\014\004\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\004\011\004\001\002\000\004\017\101\001" +
    "\002\000\004\002\100\001\002\000\004\007\033\001\002" +
    "\000\006\012\ufffc\013\ufffc\001\002\000\006\012\014\013" +
    "\012\001\002\000\006\012\ufffd\013\ufffd\001\002\000\004" +
    "\017\025\001\002\000\004\007\uffff\001\002\000\004\017" +
    "\015\001\002\000\004\027\016\001\002\000\004\021\017" +
    "\001\002\000\004\027\020\001\002\000\004\021\021\001" +
    "\002\000\004\026\022\001\002\000\004\020\023\001\002" +
    "\000\004\022\024\001\002\000\004\007\ufffa\001\002\000" +
    "\004\027\026\001\002\000\004\021\027\001\002\000\004" +
    "\027\030\001\002\000\004\020\031\001\002\000\004\022" +
    "\032\001\002\000\006\012\ufffb\013\ufffb\001\002\000\014" +
    "\004\043\005\035\006\046\014\036\015\044\001\002\000" +
    "\016\004\ufff4\005\ufff4\006\ufff4\010\ufff4\014\ufff4\015\ufff4" +
    "\001\002\000\004\017\072\001\002\000\004\022\071\001" +
    "\002\000\016\004\ufff7\005\ufff7\006\ufff7\010\ufff7\014\ufff7" +
    "\015\ufff7\001\002\000\016\004\ufff5\005\ufff5\006\ufff5\010" +
    "\ufff5\014\ufff5\015\ufff5\001\002\000\016\004\043\005\035" +
    "\006\046\010\070\014\036\015\044\001\002\000\016\004" +
    "\ufff6\005\ufff6\006\ufff6\010\ufff6\014\ufff6\015\ufff6\001\002" +
    "\000\004\017\056\001\002\000\004\022\055\001\002\000" +
    "\016\004\ufff8\005\ufff8\006\ufff8\010\ufff8\014\ufff8\015\ufff8" +
    "\001\002\000\004\017\047\001\002\000\004\027\050\001" +
    "\002\000\004\020\051\001\002\000\004\024\052\001\002" +
    "\000\006\014\036\015\044\001\002\000\004\023\054\001" +
    "\002\000\016\004\ufff3\005\ufff3\006\ufff3\010\ufff3\014\ufff3" +
    "\015\ufff3\001\002\000\020\004\uffed\005\uffed\006\uffed\010" +
    "\uffed\014\uffed\015\uffed\023\uffed\001\002\000\006\016\060" +
    "\025\061\001\002\000\004\020\063\001\002\000\004\020" +
    "\ufff0\001\002\000\004\016\062\001\002\000\004\020\uffef" +
    "\001\002\000\004\024\064\001\002\000\006\014\036\015" +
    "\044\001\002\000\004\023\066\001\002\000\016\004\ufff2" +
    "\005\ufff2\006\ufff2\010\ufff2\014\ufff2\015\ufff2\001\002\000" +
    "\016\004\ufff9\005\ufff9\006\ufff9\010\ufff9\014\ufff9\015\ufff9" +
    "\001\002\000\004\002\001\001\002\000\020\004\uffee\005" +
    "\uffee\006\uffee\010\uffee\014\uffee\015\uffee\023\uffee\001\002" +
    "\000\006\016\060\025\061\001\002\000\004\020\074\001" +
    "\002\000\004\024\075\001\002\000\006\014\036\015\044" +
    "\001\002\000\004\023\077\001\002\000\016\004\ufff1\005" +
    "\ufff1\006\ufff1\010\ufff1\014\ufff1\015\ufff1\001\002\000\004" +
    "\002\000\001\002\000\004\027\102\001\002\000\004\021" +
    "\103\001\002\000\004\027\104\001\002\000\004\020\105" +
    "\001\002\000\004\022\106\001\002\000\006\012\ufffe\013" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\010\002\004\003\005\016\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\007\001\001\000\006\004\012\006\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\040\010\044\011" +
    "\036\012\041\013\037\014\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\066\011\036\012\041\013\037" +
    "\014\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	public void forFunc (int num, int instr) {
		for (int i = 0; i < num; i++) {
			if (instr == 0) 
				GridMap.move();
			else if (instr == 1) 
					GridMap.turnLeft();
				 else 
				 	throw new IllegalArgumentException("forFunc: InstrucciÃ³n ilegal");
		}
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= TURNLEFT SCOLON 
            {
              Integer RESULT =null;
		 
				RESULT = 1; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= MOVE SCOLON 
            {
              Integer RESULT =null;
		 
				RESULT = 0; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cond ::= NEQ FCLEAR 
            {
              Integer RESULT =null;
		 
			RESULT = 1; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cond ::= FCLEAR 
            {
              Integer RESULT =null;
		 
			RESULT = 0; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // loop ::= WHILE LPAREN cond RPAREN LBRACE instruction RBRACE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			if (b == 0) {
				while (GridMap.isFrontClear()) {
					if (i == 0) 
						GridMap.move(); 
					else 
						GridMap.turnLeft();
				}
			} else { 
				while (!GridMap.isFrontClear()) { 
					if (i== 0) 
						GridMap.move(); 
					else
						GridMap.turnLeft(); 
				}
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // conditional ::= IF LPAREN cond RPAREN LBRACE instruction RBRACE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				if (b == 0) {
					if (GridMap.isFrontClear()) { 
						if	(i == 0) 
							GridMap.move(); 
						else 
							GridMap.turnLeft(); 
					}
				} else { 
					if (!GridMap.isFrontClear()) { 
						if (i == 0) 
							GridMap.move(); 
						else 
							GridMap.turnLeft(); 
					}
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // iteration ::= ITERATE LPAREN NUMBER RPAREN LBRACE instruction RBRACE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				forFunc(n, i); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= instruction 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				if (i == 0) 
					GridMap.move(); 
				else
					GridMap.turnLeft(); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= conditional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= iteration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statementList ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementList ::= statementList statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // robot ::= PLACEROBOT LPAREN NUMBER COMMA NUMBER COMMA DIR RPAREN SCOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
		  	GridMap.setElement(n1,n2,d.charAt(0)); 
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("robot",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // wall ::= PLACEWALL LPAREN NUMBER COMMA NUMBER RPAREN SCOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
		 	GridMap.setElement(n1,n2,"Wall"); 
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wall",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // wallList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wallList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // wallList ::= wallList wall 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wallList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // grid ::= DRAWGRID LPAREN NUMBER COMMA NUMBER RPAREN SCOLON 
            {
              GridMap RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
		 	RESULT = new GridMap(n1,n2); 
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grid",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= grid wallList robot 
            {
              Object RESULT =null;
		 
				GridMap.printState(); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= initial START statementList END 
            {
              Object RESULT =null;
		
				System.out.println("[Sintaxis completada satisfactoriamente]"); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

