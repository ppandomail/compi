
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 19 11:58:09 ART 2020
//----------------------------------------------------

package ar.edu.ub.dc.compilador_condicional;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 19 11:58:09 ART 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\006\005\000\002\006\003\000\002\006" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\014\014\004\016\006\017\015\020\012\021" +
    "\013\001\002\000\014\014\004\016\006\017\015\020\012" +
    "\021\013\001\002\000\016\002\ufffc\004\ufffc\005\ufffc\006" +
    "\023\007\024\015\ufffc\001\002\000\026\002\ufff1\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\015\ufff1\001\002\000\012\002\ufffe\004\ufffe\005\021" +
    "\015\ufffe\001\002\000\026\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3" +
    "\001\002\000\026\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\032\011\031\012\026\013\027\015\ufff9\001\002" +
    "\000\026\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\015\uffef\001\002\000\026" +
    "\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\015\uffee\001\002\000\004\002\035" +
    "\001\002\000\026\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\001\002" +
    "\000\010\002\000\004\017\015\000\001\002\000\014\014" +
    "\004\016\006\017\015\020\012\021\013\001\002\000\012" +
    "\002\uffff\004\uffff\005\021\015\uffff\001\002\000\014\014" +
    "\004\016\006\017\015\020\012\021\013\001\002\000\016" +
    "\002\ufffd\004\ufffd\005\ufffd\006\023\007\024\015\ufffd\001" +
    "\002\000\014\014\004\016\006\017\015\020\012\021\013" +
    "\001\002\000\014\014\004\016\006\017\015\020\012\021" +
    "\013\001\002\000\026\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\032\011\031\012\026\013\027\015\ufffa\001" +
    "\002\000\012\016\ufff6\017\ufff6\020\ufff6\021\ufff6\001\002" +
    "\000\012\016\ufff5\017\ufff5\020\ufff5\021\ufff5\001\002\000" +
    "\012\016\006\017\015\020\012\021\013\001\002\000\012" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\001\002\000\012\016" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\001\002\000\026\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\001\002\000\026\002\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\032\011\031\012\026\013" +
    "\027\015\ufffb\001\002\000\004\002\001\001\002\000\004" +
    "\015\037\001\002\000\026\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\016\002\013\003\015\004\006\005\004\006" +
    "\010\010\007\001\001\000\016\002\035\003\015\004\006" +
    "\005\004\006\010\010\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\017\005\004\006\010\010\007\001\001\000\002\001" +
    "\001\000\010\005\021\006\010\010\007\001\001\000\002" +
    "\001\001\000\006\006\033\010\007\001\001\000\006\006" +
    "\024\010\007\001\001\000\004\007\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol st){
    	token t=(token)st.value;
    	report_error("Error Sintactico:"+ t.getValor()+ "- " + t.getX() + "-" + t.getY(), null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	public void imprimeValor(String str){
		System.out.println("el valor del token: " + str);
   	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_DATO ::= falso 
            {
              token RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_DATO ::= verdadero 
            {
              token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		token t = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_DATO ::= numero 
            {
              token RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		token n = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_DATO ::= id 
            {
              token RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		token i = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CMP ::= open_par COND close_par 
            {
              token RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CMP",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CMP ::= TIPO_DATO 
            {
              token RESULT =null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		token T = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=T; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CMP",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CMP ::= CMP SIMBOLOS_COMPARAR TIPO_DATO 
            {
              token RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		token sc = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		token t = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                String val1=c.getValor();
                String val2=t.getValor(); 
           if(sc.getValor().equals(">")){
                imprimeValor(val1+"mayor"+val2);
            }
            if(sc.getValor().equals("<")){
                imprimeValor(val1+"menor"+val2);
            }
            if(sc.getValor().equals("<=")){
                imprimeValor(val1+"menor igual"+val2);
             }
            if(sc.getValor().equals(">=")){
                imprimeValor(val1+">="+val2);
            }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CMP",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SIMBOLOS_COMPARAR ::= menor_igual 
            {
              token RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOS_COMPARAR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SIMBOLOS_COMPARAR ::= mayor_igual 
            {
              token RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOS_COMPARAR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SIMBOLOS_COMPARAR ::= menor 
            {
              token RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOS_COMPARAR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SIMBOLOS_COMPARAR ::= mayor 
            {
              token RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		token m = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMBOLOS_COMPARAR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IGEXP ::= CMP 
            {
              token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IGEXP",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IGEXP ::= IGEXP no_igual CMP 
            {
              token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IGEXP",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IGEXP ::= IGEXP igual_igual CMP 
            {
              token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IGEXP",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ANDEXP ::= IGEXP 
            {
              token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDEXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ANDEXP ::= ANDEXP and_ IGEXP 
            {
              token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ANDEXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OREXP ::= ANDEXP 
            {
              token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OREXP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OREXP ::= OREXP or_ ANDEXP 
            {
              token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OREXP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // COND ::= OREXP 
            {
              token RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= COND EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		token start_val = (token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

